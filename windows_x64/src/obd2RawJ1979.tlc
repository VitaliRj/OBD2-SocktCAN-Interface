%%
%% Copyright (c) 2018 Vitali Rjasanzew-Frey
%% Licensed under the MIT License (see LICENSE for details)
%%
%% File : obd2RawJ1979.tlc
%% Created : Thu May 17 15:34:13 2018
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "obd2RawJ1979.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  obd2RawJ1979 "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void obd2RawJ1979_Start_wrapper(const real_T *sampleTime, const int_T p_width0);

    extern void obd2RawJ1979_Outputs_wrapper(const uint8_T *obd2PID,
			const uint8_T *obd2Mode,
			uint32_T *Identifier,
			uint8_T *ReturnedBytes,
			uint8_T *Mode,
			uint8_T *PID,
			uint8_T *A,
			uint8_T *B,
			uint8_T *C,
			uint8_T *D,
			real_T *Timestamp,
			uint8_T *RawData,
			uint32_T *NewMessage,
			const real_T *sampleTime, const int_T p_width0);

    extern void obd2RawJ1979_Terminate_wrapper(const real_T *sampleTime, const int_T p_width0);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Start =============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  obd2RawJ1979_Start_wrapper(%<pp1>, %<param_width1>);
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign py9 = LibBlockOutputSignalAddr(9, "", "", 0)
  %assign py10 = LibBlockOutputSignalAddr(10, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  obd2RawJ1979_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<pp1>, %<param_width1>);
  %%
%endfunction



%% [EOF] obd2RawJ1979.tlc

